version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: sentinel_ai
      POSTGRES_USER: sentinel
      POSTGRES_PASSWORD: sentinel_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../backend/db/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sentinel"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ..
      dockerfile: infrastructure/docker/Dockerfile.backend
    environment:
      - DATABASE_URL=postgresql://sentinel:sentinel_password@postgres:5432/sentinel_ai
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-jwt-secret-here
      - CORS_ORIGINS=http://localhost:3000
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../backend:/app
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ..
      dockerfile: infrastructure/docker/Dockerfile.frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data: